import clava.ClavaJoinPoints;

aspectdef ClavaJoinPointsTest

	var intType = ClavaJoinPoints.builtinType("int");
	var doubleType = ClavaJoinPoints.builtinType("double");
	var intExpr = ClavaJoinPoints.exprLiteral("a", intType);

	// Type Literal of user defined type
	println("User literal type: " + ClavaJoinPoints.typeLiteral("xpto").code);
	
	// Stmt Literal
	println("Literal statement: " + ClavaJoinPoints.stmtLiteral("int a = 0;").code);	
	
	// TypedefDecl
	var typedefDecl = ClavaJoinPoints.typedefDecl(ClavaJoinPoints.builtinType("int"), "custom_int");
	println("Typedef decl: " + typedefDecl.code);	
	
	// TypedefType
	println("Typedef type: " + ClavaJoinPoints.typedefType(typedefDecl).code);	
	
	// Cast
	println("C-Style cast: " + ClavaJoinPoints.cStyleCast(doubleType, intExpr).code);
	
	// If Stmt
	println("Empty if:\n" + ClavaJoinPoints.ifStmt("a == 0").code);
	println("If with then:\n" + ClavaJoinPoints.ifStmt("a == 0", ClavaJoinPoints.stmtLiteral("a = 1;")).code);
	println("If with else:\n" + ClavaJoinPoints.ifStmt("a == 0", undefined, ClavaJoinPoints.stmtLiteral("a = 2;")).code);
	
	// For Stmt
	println("Empty for:\n" + ClavaJoinPoints.forStmt().code);
	println("Complete for:\n" + ClavaJoinPoints.forStmt("int i=0;", "i<10;", "i++;", "i = i+1;\ni = i - 1;").code);	
end

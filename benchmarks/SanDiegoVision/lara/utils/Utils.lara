import clava.ClavaJoinPoints;
import lara.code.Timer;

import weaver.Query;

var Utils = {};

Utils.getCondExpression = function(controlVar, condRelation, endValue) {
	switch(condRelation) {
	case "lt":
		return controlVar + " < " + endValue + ";";
	case "gt":
		return controlVar + " > " + endValue + ";";
	case "le":
		return controlVar + " <= " + endValue + ";";
	case "ge":
		return controlVar + " >= " + endValue + ";";
	case "eq":
		return controlVar + " == " + endValue + ";";
	case "ne":
		return controlVar + " != " + endValue + ";";
	}

	return null;
}
Utils.getDirectionIterator = function(exclusiveLoopStatements, iterators) { 
	var direction;
	for(var statement of exclusiveLoopStatements) {
		for(var descendant of statement.descendants.filter(descendant => {
			return iterators.contains(descendant.code);
		})) {
			if(!direction)
				direction = descendant.code;
			else if(direction != descendant.code)
				throw "Transformation not applicable to loop";
		}
	}
	return direction;
}

Utils.getExclusiveLoopStatements = function(outerLoop, innerLoop) {
	var exclusiveStatements = outerLoop.body.stmts;
	var once = false;
	
	exclusiveStatements.forEach((outerStatement, index) => {
		for(var innerStatement of innerLoop.body.stmts) {
			if(outerStatement.code === innerStatement.code) {
				if(once)
					exclusiveStatements.splice(index, 1);
				else {
					exclusiveStatements.splice(index - 3, 4);
					once = true;
				};
				break;
			}
		}
	});
	return exclusiveStatements;
}


/** 
* Insert Timers around the specified method.
* @param {method} - the method around which to insert the timers.
* @author {Nuno Gomes}
*/
Utils.timeMethodCalls = function(method) { 
	debug("Inserting timers around all '" + method + "' calls.");
	for(var $call of Query.search("call", {name: method})) {
		timer = new Timer();
		timer.time($call);

	}
}


/**
* Remove specified methods from the original code.
* @param {methods} - array of strings with all the methods to remove.
* @author {Nuno Gomes}	
*/
Utils.removeMethodCalls = function(methods) {
	debug("Removing calls to irrelevant methods.");
	var changes;
	for(var method of methods) {
		changes = true;
		while(changes) {
			changes = false;
			for(var $call of Query.search("call", {name: method})) {
				$call.ancestor("statement").detach();
				changes = true;
			}
		}
	}
}

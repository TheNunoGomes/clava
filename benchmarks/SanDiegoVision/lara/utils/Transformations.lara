import lara.utils.Utils;
import clava.ClavaJoinPoints;

import weaver.Query;

var Transformations = {};

/**
* Limitations: Only works for loops with 3 nesting levels - can be worked around by looking at the 3 innermost loops.
*/
Transformations.loopSplitting = function() {
	for(var chain of Query.search("function", {name: "imsmooth"}).search("loop", {kind: "for", data: data => data.intervals}).scope("loop", {kind: "for"}).scope("loop", {kind: "for", isInnermost: true}).chain()) {	

		var iterators = [chain["loop_0"].controlVar, chain["loop_1"].controlVar, chain["loop_2"].controlVar];
		var exclusiveLoopStatements = Utils.getExclusiveLoopStatements(chain["loop_1"], chain["loop_2"]);
		//If the intermediate loop has dependencies on more than one iterator, this transformation cannot be applied.
		try {
			var it = Utils.getDirectionIterator(exclusiveLoopStatements, iterators);
		}
		catch(err) {
			println(err);
			continue;
		}
		var outerLoop = chain["loop_0"];
		var intervals = outerLoop.data.intervals;
		
		var outerLoops = [], mediumLoops = [];
		// Create a copy of the outer loop for each interval
		debug("Creating copies of outer loop.");
		for(var interval in intervals) {
			outerLoops.push(outerLoop.copy());
		}
		debug("Getting copies of medium loops.");
		// Get the medium loop of each outer loop copy
		for(var oLoop of outerLoops) {
			mediumLoops.push(oLoop.descendants("loop")[0]);
		}
		
		// If the iterating loop is the outermost, we will change the outerLoops
		// If the iterating loop is the medium, we will change the mediumLoops
		debug("Setting iterating loops as copy of outer or medium loops.");
		itLoops = outerLoop.controlVar === it ? outerLoops : mediumLoops;

		var index;
		for(index = 0; index < itLoops.length; index++) {
			debug("Creating split loop number " + (index + 1));
			itLoops[index].setInitValue(intervals[index].startValue);
			itLoops[index].setEndValue(intervals[index].endValue);
		}
		
		debug("Replacing original loop with 3 modified loops.");
		for(index = outerLoops.length - 1; index > 0; index--) {	
			debug("Inserting loop number " + (outerLoops.length - index));
			outerLoop.insertAfter(outerLoops[index]);
		}
		debug("Inserting loop number " + (outerLoops.length));
		outerLoop.replaceWith(outerLoops[0]);
	}
	
	var imsmooth = Query.search("function", {name: "imsmooth"}).first();
	debug(imsmooth.code);
}


/** 
* Replace literal double arguments in float returning calls with a literal float argument.
* Example: '0.5' is replaced by '0.5f' if it's an argument of a float returning method.
* Limitations: doubles with lots of significant digits are also turned into floats, which
*			may cause	loss of information, distortion, or other issues.
*			These limitations do not express themselves in the Vision benchmarks.
* @author {Nuno Gomes}
*/
Transformations.replaceDoublesWithFloats =  function() {
	debug("Replacing doubles.");
	var count = 0;
	var functions = [];
	for(var $call of Query.search("call")) {
		//if($call.type.code === "double")
			//continue;
		for(var argument of $call.args) {
			if(argument.type.code !== "double")
				continue;
			for(var expression of argument.descendants) {
				if(expression.type.code === "double" && expression.descendants.length === 0) {
					debug("Replacing double "+ expression.code + " for float " + expression.code + 
							"f in " + $call.code + " of type " + $call.type.code + ".");
					if(!functions.includes($call.ancestor("file").name)) {
						functions.push($call.ancestor("file").name);
						$call.ancestor("file").addGlobal(dFCount, ClavaJoinPoints.builtinType("int"), "0");
					}
					$call.ancestor("statement").insertBefore(dFCount + "++;");
					expression.replaceWith(expression.code + "f");
					count++;
				}
			}
		}
	}
	
	debug(functions);
	debug("Number of doubles replaced with floats: " + count);
}

/** 
* Replace every call of the function pow(k, n), with:
* k * (... n times ...) * k, when n >= 2
* k, when n = 1
* 1, when n = 0
* Limitations: negative values of n
* @author {Tiago Lascasas}
*/
Transformations.replaceCeilCalls =  function() {
	debug("Replacing ceil() calls with ceilf().");
	var functions = [];
	for(var $call of Query.search("call", { name: "ceil"})) {
		var statement = $call.ancestor("statement");
		var binaryOp = statement.descendants("binaryOp").filter(operator => {
			return operator.kind === "assign";
		})[0];
		var varDecl = statement.descendants("vardecl")[0];
		if(!binaryOp && !varDecl)
			continue;
		
		if(binaryOp) {
			if(binaryOp.left.type.code !== "float" && binaryOp.left.type.code !== "int")
				continue;
		}
		if(varDecl) {
			if(varDecl.type.code !== "float" && varDecl.type.code !== "int")
				continue;
		}

		var ceilfString = "ceilf(";
		for(var arg of $call.args) {
			ceilfString += arg.code;
		}
		ceilfString += ");";
		
		if(!functions.includes($call.ancestor("file").name)) {
			functions.push($call.ancestor("file").name);
			//$call.ancestor("file").addGlobal(ceilCount, ClavaJoinPoints.builtinType("int"), "0");
		}
		debug("Replacing " + $call.code + " with " + ceilfString);
		var newJp = ClavaJoinPoints.exprLiteral(ceilfString);
		$call.replaceWith(newJp);
	}
	debug(functions);
}

/** 
* Replace every call of the function pow(k, n), with:
* k * (... n times ...) * k, when n >= 2
* k, when n = 1
* 1, when n = 0
* Limitations: negative values of n
* @author {Tiago Lascasas}
*/
Transformations.replacePowCalls =  function() {
	debug("Replacing 'pow()' calls.");
	var changes = true;
	var count = 0;	
	var functions = [];
	while(changes) {
		changes = false;
		for(var $call of Query.search("call", {name: "pow"})) {
			// If power is not a literal integer, no change is supported
			if (!($call.args[1].type === "int" || /[0-9]\d*/.test($call.args[1].code)))
				continue;
			var power = parseInt($call.args[1].code);
			var expression = ClavaJoinPoints.parenthesis($call.args[0]);
			if(power >= 2) {
				// Store first 2 multiplication operands in node
				node = ClavaJoinPoints.binaryOp("mul", expression.copy(), expression.copy(), $call.args[0].type);
				// Store the rest of the multiplication operands in node
				// Stop after power is reached
				for (var i = 3; i <= power; i++) {
					node = ClavaJoinPoints.binaryOp("mul", expression.copy(), node, $call.args[0].type);
				}
				// Introduce global variable in file
				if(!functions.includes($call.ancestor("file").name)) {
					functions.push($call.ancestor("file").name);
					$call.ancestor("file").addGlobal(powCount, ClavaJoinPoints.builtinType("int"), "0");
				}
				// Add 1 execution counter incrementation
				$call.ancestor("statement").insertBefore(powCount + "++;");

				// Wrap new node in parenthesis to guarantee arithmetic consistency
				node = ClavaJoinPoints.parenthesis(node);
				
				$call.replaceWith(node);
				changes = true;
				count++;
			}
			else if (power == 1) {
				// Introduce global variable in file
				if(!functions.includes($call.ancestor("file").name)) {
					functions.push($call.ancestor("file").name);
					$call.ancestor("file").addGlobal(powCount, ClavaJoinPoints.builtinType("int"), "0");
				}
				// Add 1 execution counter incrementation
				$call.ancestor("statement").insertBefore(powCount + "++;");
				
				$call.replaceWith(expression);
				changes = true;
				count++;
			}
			else if (power == 0) {
				// Introduce global variable in file
				if(!functions.includes($call.ancestor("file").name)) {
					functions.push($call.ancestor("file").name);
					$call.ancestor("file").addGlobal(powCount, ClavaJoinPoints.builtinType("int"), "0");
				}
				// Add 1 execution counter incrementation
				$call.ancestor("statement").insertBefore(powCount + "++;");
				$call.replaceWith(ClavaJoinPoints.integerLiteral(1));
				changes = true;
				count++;
			}
			// Negative exponents are not supported, yet
		}
	}
	debug(functions);
	debug("Number of pow() calls replaced: " + count);
}
	
	/**** CREATE LOOP PARAMETER STATEMENTS *****/
	
	/******************************************/
	//ClavaJoinPoints.forStmt(loopChain["loop_2"].init, condExpression, stepExpression, loopChain["loop_2"].body);

	/*

     	dLoop = [Loop que itera sobre a variavel direction];
     	endValue = dLoop.endValue;
     	startValue = dLoop.startValue;
     	
     	dLoopStart_0 = startValue;
     	dLoopEnd_0 = W;
     	
     	start_0 = 0						(<=> dLoopStart_0)
     	end_0 = direction+W					(<=> direction + dLoopEnd_0)
     	filter_0 = W-direction				(<=> dLoopEnd_0 + direction)

     	
     	dLoopStart_1 = W					(<=> dLoopEnd_0)
     	dLoopEnd_1 = endValue-W-1;
     	
     	start_1 = direction-W				(<=> direction - dLoopStart_1)
     	end_1 = direction+W					(<=> direction + dLoopStart_1)
     	filter_1 = 0						(<=> dLoopStart_0)

     	
     	dLoopStart_2 = endValue-W-1;			(<=> dLoopEnd_1)
     	dLoopEnd_2 = endValue;
     	
     	start_2 = direction-W				(<=> direction - dLoopStart_1)
     	end_2 = endValue-1					(<=> dLoopEnd_2 - 1)
     	filter_2 = 0						(<=> dLoopStart_0)

		for(j = 0 ; j < M ; ++j) 
		{
     		for(i = 0 ; i < N ; ++i) 
			{
        			int startCol = MAX(i-W,0);
        			int endCol = MIN(i+W, N-1);
        			int filterStart = MAX(0, W-i);
        			for(k=startCol; k<=endCol; k++)
            			subsref(buffer,j,i) += subsref(array, j, k) * temp[filterStart++];
 			}
   	 	}
   	 	
		for(j = 0; j < W; ++j)
			for(i = 0; i < N; ++i)
     	     	for(k=0; k<=j+W; k++)
					subsref(out,j,i) += subsref(buffer,k,i) * temp[k+W-j]; (SUBSTITUIDO PELA MACRO)
     	 //Valores interiores da matriz
     	 for(j = W; j < M-W-1; ++j)
     	 	for(i = 0; i < N; ++i)
     	     	for(k=0; k<=2*W; k++)
     	         		subsref(out,j,i) += subsref(buffer,k+j-W,i) * temp[k]; (SUBSTITUIDO PELA MACRO)
     	 //Moldura inferior
	 	 for(j = M-W-1; j < M; ++j)
     	 	for(i = 0; i < N; ++i)
     	     	for(k=0; k<=M+W-j-1; k++)
     	     	    subsref(out,j,i) += subsref(buffer,k+j-W,i) * temp[k]; (SUBSTITUIDO PELA MACRO)
	*/

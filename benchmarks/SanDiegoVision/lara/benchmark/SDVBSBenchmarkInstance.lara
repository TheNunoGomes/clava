import lara.benchmark.ClavaBenchmarkInstance;
import lara.benchmark.SDVBSBenchmarkResources;
import lara.Io;

import clava.Clava;
import clava.ClavaJoinPoints;

import weaver.WeaverJps;

/**
 * Instance of a C SDVBS benchmark.
 */
function SDVBSBenchmarkInstance(benchmarkName, inputSize) {
    // Parent constructor
    ClavaBenchmarkInstance.call(this, "SDVBS-" + benchmarkName + "-" + inputSize);
	
	this._benchmarkName = benchmarkName;
	this._inputSize = inputSize;
	
	this._previousStandard = undefined;
	this._previousFlags = undefined;
	
	this.getCMaker().addLibs("m");
	this.getCMaker().addFlags("-DGCC", "-DCHECK");
	this.getCMaker().setName(this._benchmarkName);
}
// Inheritance
SDVBSBenchmarkInstance.prototype = Object.create(ClavaBenchmarkInstance.prototype);


/*** IMPLEMENTATIONS ***/

SDVBSBenchmarkInstance.prototype._loadPrivate = function() {


	// Save current AST
	Clava.pushAst();
	
	// Clean AST
	WeaverJps.root().removeChildren();

	// Add code
	this._addCode();
	
	// Set standard
	//this._previousStandard = Clava.getData().getStandard();
	//Clava.getData().setStandard("c99");	

	// Set define
	//this._previousFlags = Clava.getData().getFlags();
	//var modifiedFlags = this._previousFlags + " -D" + this._inputSize + "_DATASET -DSDVBS_TIME";
	//Clava.getData().setFlags(modifiedFlags);

	// Rebuild
	Clava.rebuild();

}

SDVBSBenchmarkInstance.prototype._loadPrologue = function() {
	var commonPath = "vision/common/c/";
	var benchmarkPath = "vision/benchmarks/" + this._benchmarkName.toLowerCase() + "/src/c/";
	
	var folders = [SDVBSBenchmarkResources.getFolder(commonPath), SDVBSBenchmarkResources.getFolder(benchmarkPath)];

	Clava.getData().setUserIncludes(folders);


	// Set standard
	this._previousStandard = Clava.getData().getStandard();
	Clava.getData().setStandard("c99");	

	// Set define
	this._previousFlags = Clava.getData().getFlags();
	var modifiedFlags = this._previousFlags + " -D" + this._inputSize + "_DATASET -DSDVBS_TIME";
	Clava.getData().setFlags(modifiedFlags);
}

SDVBSBenchmarkInstance.prototype._closePrivate = function() {
	// Restore standard
	if(!this.isCachedAst()) {
		Clava.getData().setStandard(this._previousStandard);	
		this._previousStandard = undefined;

		// Restore flags
		Clava.getData().setFlags(this._previousFlags);
		this._previousFlags = undefined;	
	}
	// Restore previous AST
	Clava.popAst();
		
}

SDVBSBenchmarkInstance.prototype._addCode = function() {

	// Create array with source files	
	var sourceFiles = [];
	var commonPath = "vision/common/c/";
	var benchmarkPath = "vision/benchmarks/" + this._benchmarkName.toLowerCase() + "/src/c/";
	
	var folders = [SDVBSBenchmarkResources.getFolder(commonPath), SDVBSBenchmarkResources.getFolder(benchmarkPath)];
	var commonFileList = SDVBSBenchmarkResources.getFileList(commonPath);
	var benchmarkFileList = SDVBSBenchmarkResources.getFileList(benchmarkPath);
	
	for(var file of commonFileList) {
		if(file.getAbsolutePath().endsWith(".c")) {
			sourceFiles.push(file);
		}
	}

	for(var file of benchmarkFileList) {
		if(file.getAbsolutePath().endsWith(".c")) {
			sourceFiles.push(file);
		}
	}
	
	//Clava.getData().setUserIncludes(folders);

	// Add files to tree
	for(var file of sourceFiles) {
		var clavaJPFile = ClavaJoinPoints.file(file);
		Clava.addFile(clavaJPFile);	
	}
	
	
}

SDVBSBenchmarkInstance.prototype._executePrivate = function () {
	var dataPath = "vision/benchmarks/" + this._benchmarkName.toLowerCase() + "/data/" + this._inputSize.toLowerCase();
	var benchmarkPath = "vision/benchmarks/" + this._benchmarkName.toLowerCase() + "/src/c/";
	this._currentExecutor.setWorkingDir(SDVBSBenchmarkResources.getFolder(dataPath).getAbsolutePath());
	this._currentExecutor.execute([this._currentExe.getAbsolutePath(), "./"]);
	
	this._currentExecutor.setPrintToConsole(true);
	
	return this._currentExecutor;
}
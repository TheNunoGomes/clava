import lara.benchmark.SDVBSBenchmarkSet;
import lara.benchmark.BenchmarkSet;
import lara.code.Timer;

import lara.utils.Utils;
import lara.utils.Transformations;
import lara.code.Logger;

import clava.ClavaJoinPoints;

import weaver.Query;

var powCount = "powCount";
var dFCount = "dFCount";
aspectdef Main	
	
setDebug(true);
var benchmarkNames = ["sift"];
for(var benchmarkName of benchmarkNames) {
	for(var benchmark of setupSanDiego(benchmarkName, ["SQCIF"])) {
		/*
		var mainFunction = Query.search("function", { name: "main" }).first();
		var mainFile = mainFunction.ancestor("file");
		mainFile.addGlobal(powCount, ClavaJoinPoints.builtinType("int"), "0");
		mainFile.addGlobal(dFCount, ClavaJoinPoints.builtinType("int"), "0");
		var loggerPow = new Logger();
		var loggerDF = new Logger();
		//*/
		Utils.removeMethodCalls([
			"assert", 
			//"photonReportTiming", 
			//"photonPrintTiming", 
			//"photonStartTiming", 
			//"photonEndTiming",
			"printf"
		]);
		/*
		var logLocation = mainFunction.descendants("statement")[mainFunction.descendants("statement").length-2];
		loggerPow.text("  Pow calls: ").int("powCount");
		loggerPow.logBefore(logLocation);
		
		loggerDF.text("\nFloats that were previously doubles were used these many times: ").int("dFCount");
		loggerDF.logBefore(logLocation);
		
		//*/
		//Utils.timeMethodCalls(benchmarkName);
		/*
		Transformations.replaceDoublesWithFloats();
		Transformations.replacePowCalls();
		Transformations.replaceCeilCalls();
		//*/
		/*
		var loggerOut = new Logger();
		var array = Query.search("function", {name: "imsmooth"}).search("loop", {kind: "for"}).scope("loop", {kind: "for"}).scope("loop", {kind: "for", isInnermost: true}).chain();
		var chain = array[array.length - 1];
		loggerOut.text("out = ").double("out->data[(j) * out->width + (i)]");
		loggerOut.log(chain["loop_2"].body.stmts[0]);
		*/
		Transformations.loopSplitting();
		benchmark.compile();
		//for(var i = 0; i < 10; i++)
		//	benchmark.execute();
		//println(ex.getReturnValue());
	}
}
end


function setupSanDiego(benchmarkNames, inputSizes) {
	var sdvbs = new SDVBSBenchmarkSet();
	sdvbs.setInputSizes(inputSizes);
	sdvbs.setBenchmarks(benchmarkNames);
	
	return sdvbs;
}
	
	/* PSEUDO CODIGO

	1. Construir os 3 loops - parametros base, ainda que errados

	2. Alterar os parametros dos loops - Referencia abaixo, devera ser preciso fazer rebuild da AST
	2.1. VAR node = (
      	//Moldura superior
		for(j = 0; j < W; ++j)
			for(i = 0; i < N; ++i)
     	     	for(k=0; k<=j+W; k++)
					subsref(out,j,i) += subsref(buffer,k,i) * temp[k+W-j]; (SUBSTITUIDO PELA MACRO)
     	 //Valores interiores da matriz
     	 for(j = W; j < M-W-1; ++j)
     	 	for(i = 0; i < N; ++i)
     	     	for(k=0; k<=2*W; k++)
     	         		subsref(out,j,i) += subsref(buffer,k+j-W,i) * temp[k]; (SUBSTITUIDO PELA MACRO)
     	 //Moldura inferior
	 	 for(j = M-W-1; j < M; ++j)
     	 	for(i = 0; i < N; ++i)
     	     	for(k=0; k<=M+W-j-1; k++)
     	     	    subsref(out,j,i) += subsref(buffer,k+j-W,i) * temp[k]; (SUBSTITUIDO PELA MACRO)
	)
	loop_0.replaceWith(node)
	
	*/

aspectdef QuickLoop

	var nest = Query.search("loop").scope("loop").chain()[1];
	var oLoop = nest["loop_0"];
	
	/****** Unused for now ******/
	var iLoop = nest["loop_1"];
	/****************************/
	
	
	var stepExpression = "++" + oLoop.stepValue;

	/****** Unused for now ******/
	var startInflex_1 = "0";
	var startInflex_2 = "i-W";
	var endInflex_1 = "i+W";
	var endInflex_2 = "N-1";
	/****************************/
	
	startNode_1 = ClavaJoinPoints.stmtLiteral("int start = 0");
	startNode_2 = ClavaJoinPoints.stmtLiteral("int start = i-W");
	endNode_1 = ClavaJoinPoints.stmtLiteral("int end = i+W");
	endNode_2 = ClavaJoinPoints.stmtLiteral("int end = N-1");

	var loop_1 = oLoop.copy();
	var loop_2 = oLoop.copy();
	var loop_3 = oLoop.copy();
	
	var body_1 = loop_1.body;
	var body_2 = loop_2.body;
	var body_3 = loop_3.body;

	var controlVar = oLoop.controlVar;
	var condRelation = oLoop.condRelation;


	
	var init_1 = "0";
	var end_1 = "W";
	loop_1.setInitValue(init_1);
	loop_1.setEndValue(end_1);
	var cond_1 = Utils.getCondExpression(controlVar, condRelation, loop_1.endValue);
	body_1.stmts[0].replaceWith(startNode_1);
	body_1.stmts[1].replaceWith(endNode_1);
	
	var init_2 = "W";
	var end_2 = "N-W-1";
	loop_2.setInitValue(init_2);
	loop_2.setEndValue(end_2);
	var cond_2 = Utils.getCondExpression(controlVar, condRelation, loop_3.endValue);
	body_2.stmts[0].replaceWith(startNode_2);
	body_2.stmts[1].replaceWith(endNode_1);
	
	var init_3 = "N-W-1";
	var end_3 = "N";
	loop_3.setInitValue(init_3);
	loop_3.setEndValue(end_3);
	var cond_3 = Utils.getCondExpression(controlVar, condRelation, loop_3.endValue);
	body_3.stmts[0].replaceWith(startNode_2);
	body_3.stmts[1].replaceWith(endNode_2);
	

	oLoop.insertAfter(loop_3);
	oLoop.insertAfter(loop_2);
	oLoop.replaceWith(loop_1);
	
	for(var chain of Query.search("loop").scope("loop").chain()) {
		println(chain["loop_0"].code);
	}
	//var loop_1 = ClavaJoinPoints.forStmt(oLoop.init, cond_1, stepExpression, body_1);

	//printlnObject(oLoop.code);

end
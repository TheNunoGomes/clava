import lara.util.ProcessExecutor;
import lara.Io;

var finalSADVersions = Io.getAbsolutePath("./benchmarks/disparity/src/c/finalSADVersions");
var makefileVersions = Io.getAbsolutePath("./common/makefiles/makefileVersions");

var speedupsGlobal = Io.getAbsolutePath("./benchmarks/disparity/data/fullhd/Speedups/global");
var vectorization = Io.getAbsolutePath("./benchmarks/disparity/data/fullhd/Speedups/vectorization");
var cache = Io.getAbsolutePath("./benchmarks/disparity/data/fullhd/Speedups/cache");

var finalSAD = Io.getAbsolutePath("./benchmarks/disparity/src/c/finalSAD.c");
var makefile = Io.getAbsolutePath("./common/makefiles/Makefile.common");	

var data = Io.getAbsolutePath("./benchmarks/disparity/data/fullhd");
var executor = new ProcessExecutor();

var numberOfExecutions = 30;

aspectdef Script_Disparity
	executor.setWorkingDir(Io.getAbsolutePath(data));

	call GlobalBaselineO0;
	call GlobalBaselineO2;
	call GlobalBaselineO3;

	call GlobalV1O0;
	call GlobalV1O2;
	call GlobalV1O3;


	call GlobalBaselineO3_VECTORIZATION;

	call GlobalV1O3_VECTORIZATION;


end

aspectdef GlobalBaselineO0
	var results = "";
	finalSADContent = Io.readFile(finalSADVersions + "/finalSAD_base.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O0.common");
		
	Io.writeFile(finalSAD, finalSADContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: Baseline. Measuring: Global. Flag: -O0\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./disparity ./ ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal + "/baseline_o0.txt", results);
end


aspectdef GlobalBaselineO2
	var results = "";
	finalSADContent = Io.readFile(finalSADVersions + "/finalSAD_base.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O2.common");
		
	Io.writeFile(finalSAD, finalSADContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: Baseline. Measuring: Global. Flag: -O2\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./disparity ./ ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal + "/baseline_o2.txt", results);
end

aspectdef GlobalBaselineO3
	var results = "";
	finalSADContent = Io.readFile(finalSADVersions + "/finalSAD_base.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3.common");
		
	Io.writeFile(finalSAD, finalSADContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: Baseline. Measuring: Global. Flag: -O3\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./disparity ./ ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal + "/baseline_o3.txt", results);
end



aspectdef GlobalV1O0
	var results = "";
	finalSADContent = Io.readFile(finalSADVersions + "/finalSAD_v1.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O0.common");
		
	Io.writeFile(finalSAD, finalSADContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: DISPv1. Measuring: Global. Flag: -O0\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./disparity ./ ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal + "/v1_o0.txt", results);
end

aspectdef GlobalV1O2
	var results = "";
	finalSADContent = Io.readFile(finalSADVersions + "/finalSAD_v1.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O2.common");
		
	Io.writeFile(finalSAD, finalSADContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: DISPv1. Measuring: Global. Flag: -O2\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./disparity ./ ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal + "/v1_o2.txt", results);
end

aspectdef GlobalV1O3
	var results = "";
	finalSADContent = Io.readFile(finalSADVersions + "/finalSAD_v1.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3.common");
		
	Io.writeFile(finalSAD, finalSADContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: DISPv1. Measuring: Global. Flag: -O3\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./disparity ./ ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal + "/v1_o3.txt", results);
end

/***************************************** VECTORIZATION *****************************************/

aspectdef GlobalBaselineO3_VECTORIZATION
	var results = "";
	finalSADContent = Io.readFile(finalSADVersions + "/finalSAD_base.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3_Vect.common");
		
	Io.writeFile(finalSAD, finalSADContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: Baseline. Measuring: Vectorization. Flag: -O3\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	results += executor.getConsoleOutput();

	Io.writeFile(vectorization + "/baseline_o3.txt", results);
end

aspectdef GlobalV1O3_VECTORIZATION
	var results = "";
	finalSADContent = Io.readFile(finalSADVersions + "/finalSAD_v1.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3_Vect.common");
		
	Io.writeFile(finalSAD, finalSADContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: DISPv1. Measuring: Vectorization. Flag: -O3\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	results += executor.getConsoleOutput();

	Io.writeFile(vectorization + "/v1_o3.txt", results);
end


/***************************************** CACHE *****************************************/

aspectdef GlobalBaselineO0_CACHE
	var results = "";
	finalSADContent = Io.readFile(finalSADVersions + "/finalSAD_base.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O0.common");
		
	Io.writeFile(finalSAD, finalSADContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: Baseline. Measuring: Cache. Flag: -O0\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./disparity ./");
	results += executor.getConsoleOutput();
	
	Io.writeFile(cache + "/base_o0.txt", results);
end

aspectdef GlobalBaselineO2_CACHE
	var results = "";
	finalSADContent = Io.readFile(finalSADVersions + "/finalSAD_base.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O2.common");
		
	Io.writeFile(finalSAD, finalSADContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: Baseline. Measuring: Cache. Flag: -O2\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./disparity ./");
	results += executor.getConsoleOutput();
	
	Io.writeFile(cache + "/base_o2.txt", results);
end

aspectdef GlobalBaselineO3_CACHE
	var results = "";
	finalSADContent = Io.readFile(finalSADVersions + "/finalSAD_base.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3.common");
		
	Io.writeFile(finalSAD, finalSADContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: Baseline. Measuring: Cache. Flag: -O3\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./disparity ./");
	results += executor.getConsoleOutput();
	
	Io.writeFile(cache + "/base_o3.txt", results);
end

aspectdef GlobalV1O0_CACHE
	var results = "";
	finalSADContent = Io.readFile(finalSADVersions + "/finalSAD_v1.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O0.common");
		
	Io.writeFile(finalSAD, finalSADContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: DISPv1. Measuring: Cache. Flag: -O0\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./disparity ./");
	results += executor.getConsoleOutput();
	
	Io.writeFile(cache + "/v1_o0.txt", results);
end

aspectdef GlobalV1O2_CACHE
	var results = "";
	finalSADContent = Io.readFile(finalSADVersions + "/finalSAD_v1.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O2.common");
		
	Io.writeFile(finalSAD, finalSADContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: DISPv1. Measuring: Cache. Flag: -O2\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./disparity ./");
	results += executor.getConsoleOutput();
	
	Io.writeFile(cache + "/v1_o2.txt", results);
end

aspectdef GlobalV1O3_CACHE
	var results = "";
	finalSADContent = Io.readFile(finalSADVersions + "/finalSAD_v1.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3.common");
		
	Io.writeFile(finalSAD, finalSADContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: DISPv1. Measuring: Cache. Flag: -O3\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./disparity ./");
	results += executor.getConsoleOutput();
	
	Io.writeFile(cache + "/v1_o3.txt", results);
end

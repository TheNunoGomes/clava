import lara.util.ProcessExecutor;
import lara.Io;

var sobelDxVersions = Io.getAbsolutePath("./common/c/SobelDx_Versions");
var sobelDyVersions = Io.getAbsolutePath("./common/c/SobelDy_Versions");
var imageBlurVersions = Io.getAbsolutePath("./common/c/imageBlur_Versions");
var mainVersions = Io.getAbsolutePath("./benchmarks/tracking/src/c/mainVersions");
var makefileVersions = Io.getAbsolutePath("./common/makefiles/makefileVersions");

var speedupsHotspot = Io.getAbsolutePath("./benchmarks/tracking/data/fullhd/Speedups/hotspot");
var speedupsGlobal = Io.getAbsolutePath("./benchmarks/tracking/data/fullhd/Speedups/global");
var vectorization = Io.getAbsolutePath("./benchmarks/tracking/data/fullhd/Speedups/vectorization");
var cache = Io.getAbsolutePath("./benchmarks/tracking/data/fullhd/Speedups/cache");

var sobelDx = Io.getAbsolutePath("././common/c/calcSobel_dX.c");
var sobelDy = Io.getAbsolutePath("./common/c/calcSobel_dY.c");
var imageBlur = Io.getAbsolutePath("./common/c/imageBlur.c");
var script_tracking = Io.getAbsolutePath("./benchmarks/tracking/src/c/script_tracking.c");
var makefile = Io.getAbsolutePath("./common/makefiles/Makefile.common");	

var data = Io.getAbsolutePath("./benchmarks/tracking/data/fullhd");
var executor = new ProcessExecutor();

var numberOfExecutions = 30;

aspectdef Script_Tracking
	executor.setWorkingDir(Io.getAbsolutePath(data));

	call GlobalBaselineO3_VECTORIZATION;
	call GlobalBaselineOfast_VECTORIZATION;

	call GlobalV1O3_VECTORIZATION;
	call GlobalV1Ofast_VECTORIZATION;
	
	call GlobalV2O3_VECTORIZATION;
	call GlobalV2Ofast_VECTORIZATION;



	call GlobalBaselineO0_CACHE;
	call GlobalBaselineO2_CACHE;
	call GlobalBaselineO3_CACHE;
	call GlobalBaselineOfast_CACHE;

	call GlobalV1O0_CACHE;
	call GlobalV1O2_CACHE;
	call GlobalV1O3_CACHE;
	call GlobalV1Ofast_CACHE;
	
	call GlobalV2O0_CACHE;
	call GlobalV2O2_CACHE;
	call GlobalV2O3_CACHE;
	call GlobalV2Ofast_CACHE;
end

aspectdef GlobalBaselineO0
	var results = "";
	sobelDxContent = Io.readFile(sobelDxVersions + "/calcSobel_dX_base.c");
	sobelDyContent = Io.readFile(sobelDyVersions + "/calcSobel_dY_base.c");
	imageBlurContent = Io.readFile(imageBlurVersions + "/imageBlur_base.c");
	mainContent = Io.readFile(mainVersions + "/script_tracking_base.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O0.common");
		
	Io.writeFile(sobelDx, sobelDxContent);
	Io.writeFile(sobelDy, sobelDyContent);
	Io.writeFile(imageBlur, imageBlurContent);
	Io.writeFile(script_tracking, mainContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: Baseline. Measuring: Global. Flag: -O0\n";
	results += measuring;
	println(measuring);
	
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./tracking ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal + "/baseline_o0.txt", results);
end

aspectdef GlobalBaselineO2
	var results = "";
	sobelDxContent = Io.readFile(sobelDxVersions + "/calcSobel_dX_base.c");
	sobelDyContent = Io.readFile(sobelDyVersions + "/calcSobel_dY_base.c");
	imageBlurContent = Io.readFile(imageBlurVersions + "/imageBlur_base.c");
	mainContent = Io.readFile(mainVersions + "/script_tracking_base.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O2.common");
		
	Io.writeFile(sobelDx, sobelDxContent);
	Io.writeFile(sobelDy, sobelDyContent);
	Io.writeFile(imageBlur, imageBlurContent);
	Io.writeFile(script_tracking, mainContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: Baseline. Measuring: Global. Flag: -O2\n";
	results += measuring;
	println(measuring);
	
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./tracking ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal + "/baseline_o2.txt", results);
end

aspectdef GlobalBaselineO3
	var results = "";
	sobelDxContent = Io.readFile(sobelDxVersions + "/calcSobel_dX_base.c");
	sobelDyContent = Io.readFile(sobelDyVersions + "/calcSobel_dY_base.c");
	imageBlurContent = Io.readFile(imageBlurVersions + "/imageBlur_base.c");
	mainContent = Io.readFile(mainVersions + "/script_tracking_base.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3.common");
		
	Io.writeFile(sobelDx, sobelDxContent);
	Io.writeFile(sobelDy, sobelDyContent);
	Io.writeFile(imageBlur, imageBlurContent);
	Io.writeFile(script_tracking, mainContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: Baseline. Measuring: Global. Flag: -O3\n";
	results += measuring;
	println(measuring);
	
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./tracking ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal + "/baseline_o3.txt", results);
end

aspectdef GlobalBaselineOfast
	var results = "";
	sobelDxContent = Io.readFile(sobelDxVersions + "/calcSobel_dX_base.c");
	sobelDyContent = Io.readFile(sobelDyVersions + "/calcSobel_dY_base.c");
	imageBlurContent = Io.readFile(imageBlurVersions + "/imageBlur_base.c");
	mainContent = Io.readFile(mainVersions + "/script_tracking_base.c");
<<<<<<< HEAD
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast_ODROID.common");
=======
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast_ANTAREX.common");
>>>>>>> antarex
		
	Io.writeFile(sobelDx, sobelDxContent);
	Io.writeFile(sobelDy, sobelDyContent);
	Io.writeFile(imageBlur, imageBlurContent);
	Io.writeFile(script_tracking, mainContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: Baseline. Measuring: Global. Flag: -Ofast\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./tracking ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal + "/baseline_ofast.txt", results);
end


aspectdef GlobalV1O0
	var results = "";
	sobelDxContent = Io.readFile(sobelDxVersions + "/calcSobel_dX_v1.c");
	sobelDyContent = Io.readFile(sobelDyVersions + "/calcSobel_dY_v1.c");
	imageBlurContent = Io.readFile(imageBlurVersions + "/imageBlur_v1.c");
	mainContent = Io.readFile(mainVersions + "/script_tracking_base.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O0.common");
		
	Io.writeFile(sobelDx, sobelDxContent);
	Io.writeFile(sobelDy, sobelDyContent);
	Io.writeFile(imageBlur, imageBlurContent);
	Io.writeFile(script_tracking, mainContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: TRACKv1. Measuring: Global. Flag: -O0\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./tracking ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal + "/v1_o0.txt", results);
end

aspectdef GlobalV1O2
	var results = "";
	sobelDxContent = Io.readFile(sobelDxVersions + "/calcSobel_dX_v1.c");
	sobelDyContent = Io.readFile(sobelDyVersions + "/calcSobel_dY_v1.c");
	imageBlurContent = Io.readFile(imageBlurVersions + "/imageBlur_v1.c");
	mainContent = Io.readFile(mainVersions + "/script_tracking_base.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O2.common");
		
	Io.writeFile(sobelDx, sobelDxContent);
	Io.writeFile(sobelDy, sobelDyContent);
	Io.writeFile(imageBlur, imageBlurContent);
	Io.writeFile(script_tracking, mainContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: TRACKv1. Measuring: Global. Flag: -O2\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./tracking ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal + "/v1_o2.txt", results);
end

aspectdef GlobalV1O3
	var results = "";
	sobelDxContent = Io.readFile(sobelDxVersions + "/calcSobel_dX_v1.c");
	sobelDyContent = Io.readFile(sobelDyVersions + "/calcSobel_dY_v1.c");
	imageBlurContent = Io.readFile(imageBlurVersions + "/imageBlur_v1.c");
	mainContent = Io.readFile(mainVersions + "/script_tracking_base.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3.common");
		
	Io.writeFile(sobelDx, sobelDxContent);
	Io.writeFile(sobelDy, sobelDyContent);
	Io.writeFile(imageBlur, imageBlurContent);
	Io.writeFile(script_tracking, mainContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: TRACKv1. Measuring: Global. Flag: -O3\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./tracking ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal + "/v1_o3.txt", results);
end

aspectdef GlobalV1Ofast
	var results = "";
	sobelDxContent = Io.readFile(sobelDxVersions + "/calcSobel_dX_v1.c");
	sobelDyContent = Io.readFile(sobelDyVersions + "/calcSobel_dY_v1.c");
	imageBlurContent = Io.readFile(imageBlurVersions + "/imageBlur_v1.c");
	mainContent = Io.readFile(mainVersions + "/script_tracking_base.c");
<<<<<<< HEAD
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast_ODROID.common");
=======
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast_ANTAREX.common");
>>>>>>> antarex
		
	Io.writeFile(sobelDx, sobelDxContent);
	Io.writeFile(sobelDy, sobelDyContent);
	Io.writeFile(imageBlur, imageBlurContent);
	Io.writeFile(script_tracking, mainContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: TRACKv1. Measuring: Global. Flag: -Ofast");
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./tracking ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal + "/v1_ofast.txt", results);
end

aspectdef GlobalV2O0
	var results = "";
	sobelDxContent = Io.readFile(sobelDxVersions + "/calcSobel_dX_v2.c");
	sobelDyContent = Io.readFile(sobelDyVersions + "/calcSobel_dY_v2.c");
	imageBlurContent = Io.readFile(imageBlurVersions + "/imageBlur_v2.c");
	mainContent = Io.readFile(mainVersions + "/script_tracking_v2.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O0.common");
		
	Io.writeFile(sobelDx, sobelDxContent);
	Io.writeFile(sobelDy, sobelDyContent);
	Io.writeFile(imageBlur, imageBlurContent);
	Io.writeFile(script_tracking, mainContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: TRACKv2. Measuring: Global. Flag: -O0\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./tracking ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal + "/v2_o0.txt", results);
end

aspectdef GlobalV2O2
	var results = "";
	sobelDxContent = Io.readFile(sobelDxVersions + "/calcSobel_dX_v2.c");
	sobelDyContent = Io.readFile(sobelDyVersions + "/calcSobel_dY_v2.c");
	imageBlurContent = Io.readFile(imageBlurVersions + "/imageBlur_v2.c");
	mainContent = Io.readFile(mainVersions + "/script_tracking_v2.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O2.common");
		
	Io.writeFile(sobelDx, sobelDxContent);
	Io.writeFile(sobelDy, sobelDyContent);
	Io.writeFile(imageBlur, imageBlurContent);
	Io.writeFile(script_tracking, mainContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: TRACKv2. Measuring: Global. Flag: -O2\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./tracking ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal + "/v2_o2.txt", results);
end

aspectdef GlobalV2O3
	var results = "";
	sobelDxContent = Io.readFile(sobelDxVersions + "/calcSobel_dX_v2.c");
	sobelDyContent = Io.readFile(sobelDyVersions + "/calcSobel_dY_v2.c");
	imageBlurContent = Io.readFile(imageBlurVersions + "/imageBlur_v2.c");
	mainContent = Io.readFile(mainVersions + "/script_tracking_v2.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3.common");
		
	Io.writeFile(sobelDx, sobelDxContent);
	Io.writeFile(sobelDy, sobelDyContent);
	Io.writeFile(imageBlur, imageBlurContent);
	Io.writeFile(script_tracking, mainContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: TRACKv2. Measuring: Global. Flag: -O3\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./tracking ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal + "/v2_o3.txt", results);
end

aspectdef GlobalV2Ofast
	var results = "";
	sobelDxContent = Io.readFile(sobelDxVersions + "/calcSobel_dX_v2.c");
	sobelDyContent = Io.readFile(sobelDyVersions + "/calcSobel_dY_v2.c");
	imageBlurContent = Io.readFile(imageBlurVersions + "/imageBlur_v2.c");
	mainContent = Io.readFile(mainVersions + "/script_tracking_v2.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast.common");
		
	Io.writeFile(sobelDx, sobelDxContent);
	Io.writeFile(sobelDy, sobelDyContent);
	Io.writeFile(imageBlur, imageBlurContent);
	Io.writeFile(script_tracking, mainContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: TRACKv2. Measuring: Global. Flag: -Ofast\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./tracking ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal + "/v2_ofast.txt", results);
end



/***************************************** VECTORIZATION *****************************************/


aspectdef GlobalBaselineO3_VECTORIZATION
	var results = "";
	sobelDxContent = Io.readFile(sobelDxVersions + "/calcSobel_dX_base.c");
	sobelDyContent = Io.readFile(sobelDyVersions + "/calcSobel_dY_base.c");
	imageBlurContent = Io.readFile(imageBlurVersions + "/imageBlur_base.c");
	mainContent = Io.readFile(mainVersions + "/script_tracking_base.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3_Vect.common");
		
	Io.writeFile(sobelDx, sobelDxContent);
	Io.writeFile(sobelDy, sobelDyContent);
	Io.writeFile(imageBlur, imageBlurContent);
	Io.writeFile(script_tracking, mainContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: Baseline. Measuring: Vectorization. Flag: -O3");
	
	executor.execute("make", "compile");
	results += executor.getConsoleOutput();
	
	Io.writeFile(speedupsGlobal + "/base_o3_vect.txt", results);
end

aspectdef GlobalBaselineOfast_VECTORIZATION
	var results = "";
	sobelDxContent = Io.readFile(sobelDxVersions + "/calcSobel_dX_base.c");
	sobelDyContent = Io.readFile(sobelDyVersions + "/calcSobel_dY_base.c");
	imageBlurContent = Io.readFile(imageBlurVersions + "/imageBlur_base.c");
	mainContent = Io.readFile(mainVersions + "/script_tracking_base.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast_Vect.common");
		
	Io.writeFile(sobelDx, sobelDxContent);
	Io.writeFile(sobelDy, sobelDyContent);
	Io.writeFile(imageBlur, imageBlurContent);
	Io.writeFile(script_tracking, mainContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: Baseline. Measuring: Vectorization. Flag: -Ofast");
	
	executor.execute("make", "compile");
	results += executor.getConsoleOutput();
	
	Io.writeFile(speedupsGlobal + "/base_ofast_vect.txt", results);
end


aspectdef GlobalV1O3_VECTORIZATION
	var results = "";
	sobelDxContent = Io.readFile(sobelDxVersions + "/calcSobel_dX_v1.c");
	sobelDyContent = Io.readFile(sobelDyVersions + "/calcSobel_dY_v1.c");
	imageBlurContent = Io.readFile(imageBlurVersions + "/imageBlur_v1.c");
	mainContent = Io.readFile(mainVersions + "/script_tracking_base.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3_Vect.common");
		
	Io.writeFile(sobelDx, sobelDxContent);
	Io.writeFile(sobelDy, sobelDyContent);
	Io.writeFile(imageBlur, imageBlurContent);
	Io.writeFile(script_tracking, mainContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: v1. Measuring: Vectorization. Flag: -O3");
	
	executor.execute("make", "compile");
	results += executor.getConsoleOutput();
	
	Io.writeFile(vectorization + "/v1_o3.txt", results);
end

aspectdef GlobalV1Ofast_VECTORIZATION
	var results = "";
	sobelDxContent = Io.readFile(sobelDxVersions + "/calcSobel_dX_v1.c");
	sobelDyContent = Io.readFile(sobelDyVersions + "/calcSobel_dY_v1.c");
	imageBlurContent = Io.readFile(imageBlurVersions + "/imageBlur_v1.c");
	mainContent = Io.readFile(mainVersions + "/script_tracking_base.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast_Vect.common");
		
	Io.writeFile(sobelDx, sobelDxContent);
	Io.writeFile(sobelDy, sobelDyContent);
	Io.writeFile(imageBlur, imageBlurContent);
	Io.writeFile(script_tracking, mainContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: v1. Measuring: Vectorization. Flag: -Ofast");
	
	executor.execute("make", "compile");
	results += executor.getConsoleOutput();
	
	Io.writeFile(vectorization + "/v1_ofast.txt", results);
end

aspectdef GlobalV2O3_VECTORIZATION
	var results = "";
	sobelDxContent = Io.readFile(sobelDxVersions + "/calcSobel_dX_v2.c");
	sobelDyContent = Io.readFile(sobelDyVersions + "/calcSobel_dY_v2.c");
	imageBlurContent = Io.readFile(imageBlurVersions + "/imageBlur_v2.c");
	mainContent = Io.readFile(mainVersions + "/script_tracking_v2.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3_Vect.common");
		
	Io.writeFile(sobelDx, sobelDxContent);
	Io.writeFile(sobelDy, sobelDyContent);
	Io.writeFile(imageBlur, imageBlurContent);
	Io.writeFile(script_tracking, mainContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: v2. Measuring: Vectorization. Flag: -O3");
	
	executor.execute("make", "compile");
	results += executor.getConsoleOutput();
	
	Io.writeFile(vectorization + "/v2_o3.txt", results);
end

aspectdef GlobalV2Ofast_VECTORIZATION
	var results = "";
	sobelDxContent = Io.readFile(sobelDxVersions + "/calcSobel_dX_v2.c");
	sobelDyContent = Io.readFile(sobelDyVersions + "/calcSobel_dY_v2.c");
	imageBlurContent = Io.readFile(imageBlurVersions + "/imageBlur_v2.c");
	mainContent = Io.readFile(mainVersions + "/script_tracking_v2.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast_Vect.common");
		
	Io.writeFile(sobelDx, sobelDxContent);
	Io.writeFile(sobelDy, sobelDyContent);
	Io.writeFile(imageBlur, imageBlurContent);
	Io.writeFile(script_tracking, mainContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: v2. Measuring: Vectorization. Flag: -Ofast");
	
	executor.execute("make", "compile");
	results += executor.getConsoleOutput();
	
	Io.writeFile(vectorization + "/v2_ofast.txt", results);
end


/***************************************** CACHE *****************************************/


aspectdef GlobalBaselineO0_CACHE
	var results = "";
	sobelDxContent = Io.readFile(sobelDxVersions + "/calcSobel_dX_base.c");
	sobelDyContent = Io.readFile(sobelDyVersions + "/calcSobel_dY_base.c");
	imageBlurContent = Io.readFile(imageBlurVersions + "/imageBlur_base.c");
	mainContent = Io.readFile(mainVersions + "/script_tracking_base.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O0.common");
		
	Io.writeFile(sobelDx, sobelDxContent);
	Io.writeFile(sobelDy, sobelDyContent);
	Io.writeFile(imageBlur, imageBlurContent);
	Io.writeFile(script_tracking, mainContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: Baseline. Measuring: Cache. Flag: -O0");
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./tracking ./");
	results += executor.getConsoleOutput();
	
	Io.writeFile(cache + "/base_o0_cache.txt", results);
end

aspectdef GlobalBaselineO2_CACHE
	var results = "";
	sobelDxContent = Io.readFile(sobelDxVersions + "/calcSobel_dX_base.c");
	sobelDyContent = Io.readFile(sobelDyVersions + "/calcSobel_dY_base.c");
	imageBlurContent = Io.readFile(imageBlurVersions + "/imageBlur_base.c");
	mainContent = Io.readFile(mainVersions + "/script_tracking_base.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O2.common");
		
	Io.writeFile(sobelDx, sobelDxContent);
	Io.writeFile(sobelDy, sobelDyContent);
	Io.writeFile(imageBlur, imageBlurContent);
	Io.writeFile(script_tracking, mainContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: Baseline. Measuring: Cache. Flag: -O2");
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./tracking ./");
	results += executor.getConsoleOutput();
	
	Io.writeFile(cache + "/base_o2_cache.txt", results);
end

aspectdef GlobalBaselineO3_CACHE
	var results = "";
	sobelDxContent = Io.readFile(sobelDxVersions + "/calcSobel_dX_base.c");
	sobelDyContent = Io.readFile(sobelDyVersions + "/calcSobel_dY_base.c");
	imageBlurContent = Io.readFile(imageBlurVersions + "/imageBlur_base.c");
	mainContent = Io.readFile(mainVersions + "/script_tracking_base.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3.common");
		
	Io.writeFile(sobelDx, sobelDxContent);
	Io.writeFile(sobelDy, sobelDyContent);
	Io.writeFile(imageBlur, imageBlurContent);
	Io.writeFile(script_tracking, mainContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: Baseline. Measuring: Cache. Flag: -O3");
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./tracking ./");
	results += executor.getConsoleOutput();
	
	Io.writeFile(cache + "/base_o3_cache.txt", results);
end

aspectdef GlobalBaselineOfast_CACHE
	var results = "";
	sobelDxContent = Io.readFile(sobelDxVersions + "/calcSobel_dX_base.c");
	sobelDyContent = Io.readFile(sobelDyVersions + "/calcSobel_dY_base.c");
	imageBlurContent = Io.readFile(imageBlurVersions + "/imageBlur_base.c");
	mainContent = Io.readFile(mainVersions + "/script_tracking_base.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast.common");
		
	Io.writeFile(sobelDx, sobelDxContent);
	Io.writeFile(sobelDy, sobelDyContent);
	Io.writeFile(imageBlur, imageBlurContent);
	Io.writeFile(script_tracking, mainContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: Baseline. Measuring: Cache. Flag: -Ofast");
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./tracking ./");
	results += executor.getConsoleOutput();
	
	Io.writeFile(cache + "/base_ofast_cache.txt", results);
end


aspectdef GlobalV1O0_CACHE
	var results = "";
	sobelDxContent = Io.readFile(sobelDxVersions + "/calcSobel_dX_v1.c");
	sobelDyContent = Io.readFile(sobelDyVersions + "/calcSobel_dY_v1.c");
	imageBlurContent = Io.readFile(imageBlurVersions + "/imageBlur_v1.c");
	mainContent = Io.readFile(mainVersions + "/script_tracking_base.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O0.common");
		
	Io.writeFile(sobelDx, sobelDxContent);
	Io.writeFile(sobelDy, sobelDyContent);
	Io.writeFile(imageBlur, imageBlurContent);
	Io.writeFile(script_tracking, mainContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: v1. Measuring: Cache. Flag: -O0");
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./tracking ./");
	results += executor.getConsoleOutput();

	Io.writeFile(cache + "/v1_o0.txt", results);
end

aspectdef GlobalV1O2_CACHE
	var results = "";
	sobelDxContent = Io.readFile(sobelDxVersions + "/calcSobel_dX_v1.c");
	sobelDyContent = Io.readFile(sobelDyVersions + "/calcSobel_dY_v1.c");
	imageBlurContent = Io.readFile(imageBlurVersions + "/imageBlur_v1.c");
	mainContent = Io.readFile(mainVersions + "/script_tracking_base.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O2.common");
		
	Io.writeFile(sobelDx, sobelDxContent);
	Io.writeFile(sobelDy, sobelDyContent);
	Io.writeFile(imageBlur, imageBlurContent);
	Io.writeFile(script_tracking, mainContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: v1. Measuring: Cache. Flag: -O2");
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./tracking ./");
	results += executor.getConsoleOutput();

	Io.writeFile(cache + "/v1_o2.txt", results);
end

aspectdef GlobalV1O3_CACHE
	var results = "";
	sobelDxContent = Io.readFile(sobelDxVersions + "/calcSobel_dX_v1.c");
	sobelDyContent = Io.readFile(sobelDyVersions + "/calcSobel_dY_v1.c");
	imageBlurContent = Io.readFile(imageBlurVersions + "/imageBlur_v1.c");
	mainContent = Io.readFile(mainVersions + "/script_tracking_base.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3.common");
		
	Io.writeFile(sobelDx, sobelDxContent);
	Io.writeFile(sobelDy, sobelDyContent);
	Io.writeFile(imageBlur, imageBlurContent);
	Io.writeFile(script_tracking, mainContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: v1. Measuring: Cache. Flag: -O3");
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./tracking ./");
	results += executor.getConsoleOutput();

	Io.writeFile(cache + "/v1_o3.txt", results);
end

aspectdef GlobalV1Ofast_CACHE
	var results = "";
	sobelDxContent = Io.readFile(sobelDxVersions + "/calcSobel_dX_v1.c");
	sobelDyContent = Io.readFile(sobelDyVersions + "/calcSobel_dY_v1.c");
	imageBlurContent = Io.readFile(imageBlurVersions + "/imageBlur_v1.c");
	mainContent = Io.readFile(mainVersions + "/script_tracking_base.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast.common");
		
	Io.writeFile(sobelDx, sobelDxContent);
	Io.writeFile(sobelDy, sobelDyContent);
	Io.writeFile(imageBlur, imageBlurContent);
	Io.writeFile(script_tracking, mainContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: v1. Measuring: Cache. Flag: -Ofast");
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./tracking ./");
	results += executor.getConsoleOutput();

	Io.writeFile(cache + "/v1_ofast.txt", results);
end

aspectdef GlobalV2O0_CACHE
	var results = "";
	sobelDxContent = Io.readFile(sobelDxVersions + "/calcSobel_dX_v2.c");
	sobelDyContent = Io.readFile(sobelDyVersions + "/calcSobel_dY_v2.c");
	imageBlurContent = Io.readFile(imageBlurVersions + "/imageBlur_v2.c");
	mainContent = Io.readFile(mainVersions + "/script_tracking_v2.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O0.common");
		
	Io.writeFile(sobelDx, sobelDxContent);
	Io.writeFile(sobelDy, sobelDyContent);
	Io.writeFile(imageBlur, imageBlurContent);
	Io.writeFile(script_tracking, mainContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: v2. Measuring: Cache. Flag: -O0");
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./tracking ./");
	results += executor.getConsoleOutput();

	Io.writeFile(cache + "/v2_o0.txt", results);
end

aspectdef GlobalV2O2_CACHE
	var results = "";
	sobelDxContent = Io.readFile(sobelDxVersions + "/calcSobel_dX_v2.c");
	sobelDyContent = Io.readFile(sobelDyVersions + "/calcSobel_dY_v2.c");
	imageBlurContent = Io.readFile(imageBlurVersions + "/imageBlur_v2.c");
	mainContent = Io.readFile(mainVersions + "/script_tracking_v2.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O2.common");
		
	Io.writeFile(sobelDx, sobelDxContent);
	Io.writeFile(sobelDy, sobelDyContent);
	Io.writeFile(imageBlur, imageBlurContent);
	Io.writeFile(script_tracking, mainContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: v2. Measuring: Cache. Flag: -O2");
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./tracking ./");
	results += executor.getConsoleOutput();

	Io.writeFile(cache + "/v2_o2.txt", results);
end

aspectdef GlobalV2O3_CACHE
	var results = "";
	sobelDxContent = Io.readFile(sobelDxVersions + "/calcSobel_dX_v2.c");
	sobelDyContent = Io.readFile(sobelDyVersions + "/calcSobel_dY_v2.c");
	imageBlurContent = Io.readFile(imageBlurVersions + "/imageBlur_v2.c");
	mainContent = Io.readFile(mainVersions + "/script_tracking_v2.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3.common");
		
	Io.writeFile(sobelDx, sobelDxContent);
	Io.writeFile(sobelDy, sobelDyContent);
	Io.writeFile(imageBlur, imageBlurContent);
	Io.writeFile(script_tracking, mainContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: v2. Measuring: Cache. Flag: -O3");
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./tracking ./");
	results += executor.getConsoleOutput();

	Io.writeFile(cache + "/v2_o3.txt", results);
end

aspectdef GlobalV2Ofast_CACHE
	var results = "";
	sobelDxContent = Io.readFile(sobelDxVersions + "/calcSobel_dX_v2.c");
	sobelDyContent = Io.readFile(sobelDyVersions + "/calcSobel_dY_v2.c");
	imageBlurContent = Io.readFile(imageBlurVersions + "/imageBlur_v2.c");
	mainContent = Io.readFile(mainVersions + "/script_tracking_v2.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast.common");
		
	Io.writeFile(sobelDx, sobelDxContent);
	Io.writeFile(sobelDy, sobelDyContent);
	Io.writeFile(imageBlur, imageBlurContent);
	Io.writeFile(script_tracking, mainContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: v2. Measuring: Cache. Flag: -Ofast");
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./tracking ./");
	results += executor.getConsoleOutput();

	Io.writeFile(cache + "/v2_ofast.txt", results);
end

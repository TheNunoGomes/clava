import lara.util.ProcessExecutor;
import lara.Io;

var imsmoothVersions = Io.getAbsolutePath("./benchmarks/sift/src/c/imsmoothVersions");
var gaussianssVersions = Io.getAbsolutePath("./benchmarks/sift/src/c/gaussianssVersions");
var scriptSiftVersions = Io.getAbsolutePath("./benchmarks/sift/src/c/scriptSiftVersions");
var headerVersions = Io.getAbsolutePath("./benchmarks/sift/src/c/headerVersions");
var makefileVersions = Io.getAbsolutePath("./common/makefiles/makefileVersions");

var speedupsHotspot = Io.getAbsolutePath("./benchmarks/sift/data/fullhd/Speedups/hotspot");
var speedupsGlobal = Io.getAbsolutePath("./benchmarks/sift/data/fullhd/Speedups/global");
var vectorization = Io.getAbsolutePath("./benchmarks/sift/data/fullhd/Speedups/vectorization");

var imsmooth = Io.getAbsolutePath("./benchmarks/sift/src/c/imsmooth.c");
var gaussianss = Io.getAbsolutePath("./benchmarks/sift/src/c/gaussianss.c");
var script_sift = Io.getAbsolutePath("./benchmarks/sift/src/c/script_sift.c");
var sift_h = Io.getAbsolutePath("./benchmarks/sift/src/c/sift.h");	
var makefile = Io.getAbsolutePath("./common/makefiles/Makefile.common");	

var imsmoothFiles = Io.getFiles(imsmoothVersions);
var gaussianssFiles = Io.getFiles(gaussianssVersions);
var scriptSiftFiles = Io.getFiles(scriptSiftVersions);
var headerFiles = Io.getFiles(headerVersions);
var makesfilesFiles = Io.getFiles(makefileVersions);

var data = Io.getAbsolutePath("./benchmarks/sift/data/fullhd");
var executor = new ProcessExecutor();

var numberOfExecutions = 1;

aspectdef Script
	executor.setWorkingDir(Io.getAbsolutePath(data));


	call GlobalV5Ofast_VECTORIZATION;

//	call GlobalBaselineOfast_Cache;
//	call HotspotBaselineOfast_Cache;
//
//	call HotspotV5Ofast_CacheW5;
//	call HotspotV5Ofast_CacheW7;
//	call HotspotV5Ofast_CacheW8;
//	call HotspotV5Ofast_CacheW10;
//	call HotspotV5Ofast_CacheW13;

		
end

aspectdef HotspotBaselineO2
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_base.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_base.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_hotspot.c");
	headerContent = Io.readFile(headerVersions + "/sift.h");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O2.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(sift_h, headerContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: Baseline. Measuring: Hotspot. Flag: -O2");
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsHotspot + "/baseline_o2.txt", results);
end

aspectdef HotspotBaselineO3
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_base.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_base.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_hotspot.c");
	headerContent = Io.readFile(headerVersions + "/sift.h");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3.common");
		
	
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(sift_h, headerContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: Baseline. Measuring: Hotspot. Flag: -O3");
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsHotspot + "/baseline_o3.txt", results);
end

aspectdef HotspotBaselineOfast
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_base.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_base.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_hotspot.c");
	headerContent = Io.readFile(headerVersions + "/sift.h");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(sift_h, headerContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: Baseline. Measuring: Hotspot. Flag: -Ofast");
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsHotspot + "/baseline_ofast.txt", results);
end

aspectdef HotspotV1Ofast
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v1.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_hotspot.c");
	headerContent = Io.readFile(headerVersions + "/sift.h");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(sift_h, headerContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: v1. Measuring: Hotspot. Flag: -Ofast");
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsHotspot + "/v1_ofast.txt", results);
end

aspectdef HotspotV2Ofast
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v2.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v2.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_hotspot.c");
	headerContent = Io.readFile(headerVersions + "/sift.h");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(sift_h, headerContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: v2. Measuring: Hotspot. Flag: -Ofast");
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsHotspot + "/v2_ofast.txt", results);
end

aspectdef HotspotV3Ofast
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v3.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v3.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_hotspot.c");
	headerContent = Io.readFile(headerVersions + "/sift_v3.h");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(sift_h, headerContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: v3. Measuring: Hotspot. Flag: -Ofast");
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsHotspot + "/v3_ofast.txt", results);
end

aspectdef HotspotV4Ofast
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v4.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v4.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_hotspot.c");
	headerContent = Io.readFile(headerVersions + "/sift_v4.h");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast.common");
	
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(sift_h, headerContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: v4. Measuring: Hotspot. Flag: -Ofast");
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsHotspot + "/v4_ofast.txt", results);
end

aspectdef HotspotV5O2
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v5.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v5.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_hotspot.c");
	headerContent = Io.readFile(headerVersions + "/sift.h");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O2.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(sift_h, headerContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: v5. Measuring: Hotspot. Flag: -O2");
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsHotspot + "/v5_o2.txt", results);
end

aspectdef HotspotV5O3
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v5.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v5.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_hotspot.c");
	headerContent = Io.readFile(headerVersions + "/sift.h");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3.common");
	
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(sift_h, headerContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: v5. Measuring: Hotspot. Flag: -O3");
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsHotspot + "/v5_O3.txt", results);
end

aspectdef HotspotV5Ofast
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v5.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v5.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_hotspot.c");
	headerContent = Io.readFile(headerVersions + "/sift.h");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast.common");
	
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(sift_h, headerContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: v5. Measuring: Hotspot. Flag: -Ofast");
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsHotspot + "/v5_ofast.txt", results);
end

aspectdef GlobalBaselineO2
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_base_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_base.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	headerContent = Io.readFile(headerVersions + "/sift.h");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O2.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(sift_h, headerContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: Baseline. Measuring: Global. Flag: -O2");
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal + "/baseline_o2.txt", results);
end

aspectdef GlobalBaselineO3
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_base_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_base.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	headerContent = Io.readFile(headerVersions + "/sift.h");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3.common");
			
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(sift_h, headerContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: Baseline. Measuring: Global. Flag: -O3");
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal + "/baseline_o3.txt", results);
end

aspectdef GlobalBaselineOfast
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_base_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_base.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	headerContent = Io.readFile(headerVersions + "/sift.h");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(sift_h, headerContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: Baseline. Measuring: Global. Flag: -Ofast");
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal + "/baseline_ofast.txt", results);
end

aspectdef GlobalV5O2
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v5_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v5.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	headerContent = Io.readFile(headerVersions + "/sift.h");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O2.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(sift_h, headerContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: v5. Measuring: Global. Flag: -O2");
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal + "/v5_o2.txt", results);
end

aspectdef GlobalV5O3
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v5_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v5.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	headerContent = Io.readFile(headerVersions + "/sift.h");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(sift_h, headerContent);
	Io.writeFile(makefile, makefileContent);
	

	println("Executing: v5. Measuring: Global. Flag: -O3");
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal + "/v5_o3.txt", results);
end

aspectdef GlobalV5Ofast
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v5_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v5.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	headerContent = Io.readFile(headerVersions + "/sift.h");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(sift_h, headerContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: v5. Measuring: Global. Flag: -Ofast");
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal + "/v5_ofast.txt", results);
end






aspectdef GlobalV5Ofast_VECTORIZATION
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v5_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v5.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	headerContent = Io.readFile(headerVersions + "/sift.h");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast_Vect.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(sift_h, headerContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: v5. Measuring: Global. Flag: -Ofast");
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(vectorization + "/v5_ofast.txt", results);
end






aspectdef GlobalBaselineOfast_Cache
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_base_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_base.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	headerContent = Io.readFile(headerVersions + "/sift.h");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(sift_h, headerContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: Baseline. Measuring: Global Cache. Flag: -Ofast");
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal + "/base_cache.txt", results);
end

aspectdef GlobalV5Ofast_Cache
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v5_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v5.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	headerContent = Io.readFile(headerVersions + "/sift.h");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(sift_h, headerContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: v5. Measuring: Global Cache. Flag: -Ofast");
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal + "/v5_cache.txt", results);
end



aspectdef HotspotBaselineOfast_Cache
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_base_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_base.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	headerContent = Io.readFile(headerVersions + "/sift.h");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast.common");
	
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(sift_h, headerContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: Baseline. Measuring: Hotspot Cache. Flag: -Ofast");
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("valgrind --tool=callgrind --simulate-cache=yes --toggle-collect=imsmooth ./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsHotspot + "/base_cache.txt", results);
end

aspectdef HotspotV5Ofast_CacheW5
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v5_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v5.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	headerContent = Io.readFile(headerVersions + "/sift.h");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(sift_h, headerContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: v5. Measuring: W5 Cache. Flag: -Ofast");
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("valgrind --tool=callgrind --simulate-cache=yes --toggle-collect=imsmooth5W ./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsHotspot + "/v5_cacheW5.txt", results);
end

aspectdef HotspotV5Ofast_CacheW7
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v5_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v5.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	headerContent = Io.readFile(headerVersions + "/sift.h");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(sift_h, headerContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: v5. Measuring: W7 Cache. Flag: -Ofast");
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("valgrind --tool=callgrind --simulate-cache=yes --toggle-collect=imsmooth7W ./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsHotspot + "/v5_cacheW7.txt", results);
end

aspectdef HotspotV5Ofast_CacheW8
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v5_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v5.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	headerContent = Io.readFile(headerVersions + "/sift.h");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(sift_h, headerContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: v5. Measuring: W8 Cache. Flag: -Ofast");
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("valgrind --tool=callgrind --simulate-cache=yes --toggle-collect=imsmooth8W ./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsHotspot + "/v5_cacheW8.txt", results);
end

aspectdef HotspotV5Ofast_CacheW10
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v5_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v5.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	headerContent = Io.readFile(headerVersions + "/sift.h");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(sift_h, headerContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: v5. Measuring: W10 Cache. Flag: -Ofast");
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("valgrind --tool=callgrind --simulate-cache=yes --toggle-collect=imsmooth10W ./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsHotspot + "/v5_cacheW10.txt", results);
end

aspectdef HotspotV5Ofast_CacheW13
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v5_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v5.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	headerContent = Io.readFile(headerVersions + "/sift.h");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(sift_h, headerContent);
	Io.writeFile(makefile, makefileContent);
	
	println("Executing: v5. Measuring: W13 Cache. Flag: -Ofast");
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("valgrind --tool=callgrind --simulate-cache=yes --toggle-collect=imsmooth13W ./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsHotspot + "/v5_cacheW13.txt", results);
end
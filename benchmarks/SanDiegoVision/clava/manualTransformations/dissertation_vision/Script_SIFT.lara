import lara.util.ProcessExecutor;
import lara.Io;

var imsmoothVersions = Io.getAbsolutePath("./benchmarks/sift/src/c/imsmoothVersions");
var gaussianssVersions = Io.getAbsolutePath("./benchmarks/sift/src/c/gaussianssVersions");
var scriptSiftVersions = Io.getAbsolutePath("./benchmarks/sift/src/c/scriptSiftVersions");
var makefileVersions = Io.getAbsolutePath("./common/makefiles/makefileVersions");


var energymonitor = Io.getAbsolutePath("./common/energymonitor");

var speedupsHotspot = Io.getAbsolutePath("./benchmarks/sift/data/fullhd/Speedups/hotspot");
var speedupsGlobal = Io.getAbsolutePath("./benchmarks/sift/data/fullhd/Speedups/global");
var vectorization = Io.getAbsolutePath("./benchmarks/sift/data/fullhd/Speedups/vectorization");
var cache = Io.getAbsolutePath("./benchmarks/sift/data/fullhd/Speedups/cache");

var resultsDir = Io.getAbsolutePath("./benchmarks/sift/data/fullhd/Results");

var imsmooth = Io.getAbsolutePath("./benchmarks/sift/src/c/imsmooth.c");
var gaussianss = Io.getAbsolutePath("./benchmarks/sift/src/c/gaussianss.c");
var script_sift = Io.getAbsolutePath("./benchmarks/sift/src/c/script_sift.c");
var makefile = Io.getAbsolutePath("./common/makefiles/Makefile.common");	

var imsmoothFiles = Io.getFiles(imsmoothVersions);
var gaussianssFiles = Io.getFiles(gaussianssVersions);
var scriptSiftFiles = Io.getFiles(scriptSiftVersions);
var makesfilesFiles = Io.getFiles(makefileVersions);

var data = Io.getAbsolutePath("./benchmarks/sift/data/fullhd");
var executor = new ProcessExecutor();

aspectdef Script
	executor.setWorkingDir(Io.getAbsolutePath(data));
	var N = 1;
	
	//call Profile("base", "global", "energy", "O0", N);
	//call Profile("v1", "global", "energy", "O0", N);
	
	call Profile("v2", "global", "energy", "O0", N);
	call Profile("v2", "global", "time", "O0", N);
	
	/*
	call Profile("v3", "global", "energy", "O0", N);
	
	call Profile("base", "global", "energy", "O2", N);
	call Profile("v1", "global", "energy", "O2", N);
	call Profile("v2", "global", "energy", "O2", N);
	call Profile("v3", "global", "energy", "O2", N);
	

	call Profile("base", "global", "energy", "O3", N);
	call Profile("v1", "global", "energy", "O3", N);
	call Profile("v2", "global", "energy", "O3", N);
	call Profile("v3", "global", "energy", "O3", N);
	
	
	call Profile("base", "global", "energy", "Ofast", N);
	call Profile("v1", "global", "energy", "Ofast", N);
	call Profile("v2", "global", "energy", "Ofast", N);
	call Profile("v3", "global", "energy", "Ofast", N);
	*/
end

aspectdef Profile
	input
		version,
		scope,
		metric,
		flag,
		numberOfExecutions
	end

	var results = "";
		
	if(scope == "global") {
		imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_" + version + ".c");
		scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_" + metric + ".c");
	} 
	else {
		imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_" + version + "_" + "metric" + ".c");
		scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift.c");
	}

	if(version == "base")
		gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_base.c");
	else 
		gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");

	makefileContent = Io.readFile(makefileVersions + "/" + metric + "/Makefile_" + flag + ".common");
	
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
		
	var measuring = "Executing: SIFT_" + version + ". Scope: " + scope + ". Measuring: " + metric + ". Flag: -" + flag + "\n";
	results += measuring;
	println(measuring);
			
	executor.execute("make", "compile");
	if(metric == "energy") {
		var dataFiles = Io.getFiles(data, "*.o");
		var cppFiles = Io.getFiles(energymonitor, "*.cpp");
		var headerFiles = Io.getFiles(energymonitor, "*.h");
		
		var cppCompile = ["g++"].concat(dataFiles).concat(cppFiles).concat(headerFiles).concat(["-lpthread"]);

		executor.execute(cppCompile);
	}

	for(var i = 0; i < numberOfExecutions; i++) {	
		switch(metric) {
			case "energy":
				executor.execute("./a.out ./");
				break;
			case "time":
				executor.execute("./sift ./");
				break;
			case "cache":
				executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./sift ./");
				break;
			default:
				break;
		}	
		results += executor.getConsoleOutput();
	}
	var file = resultsDir + "/" + scope + "/" + metric + "/" + flag + "/SIFT_" + version + ".txt";
	Io.writeFile(file, results);
end

aspectdef GlobalBaselineO0
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_base.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_base.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O0.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
		
	var measuring = "Executing: Baseline. Measuring: Global. Flag: -O0\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal+ "/baseline_o0.txt", results);
end

aspectdef GlobalBaselineO2
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_base.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_base.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O2.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
			
	var measuring = "Executing: Baseline. Measuring: Global. Flag: -O2\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal+ "/baseline_o2.txt", results);
end

aspectdef GlobalBaselineO3
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_base_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_base.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: Baseline. Measuring: Global. Flag: -O3\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal+ "/baseline_o3.txt", results);
end

aspectdef GlobalBaselineOfast
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_base_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_base.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: Baseline. Measuring: Global. Flag: -Ofast\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal+ "/baseline_ofast.txt", results);
end



aspectdef GlobalV1O0
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v1.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O0.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: SIFTv1. Measuring: Global. Flag: -O0\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal + "/v1_o0.txt", results);
end

aspectdef GlobalV1O2
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v1.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O2.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: SIFTv1. Measuring: Global. Flag: -O2\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal + "/v1_o2.txt", results);
end

aspectdef GlobalV1O3
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v1.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: SIFTv1. Measuring: Global. Flag: -O3\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal + "/v1_o3.txt", results);
end

aspectdef GlobalV1Ofast
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v1.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: SIFTv1. Measuring: Global. Flag: -Ofast\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal + "/v1_ofast.txt", results);
end



aspectdef GlobalV2O0
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v2_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O0.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: SIFTv2. Measuring: Global. Flag: -O0\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal+ "/v2_o0.txt", results);
end

aspectdef GlobalV2O2
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v2_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O2.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: SIFTv2. Measuring: Global. Flag: -O2\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal+ "/v2_o2.txt", results);
end

aspectdef GlobalV2O3
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v2_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: SIFTv2. Measuring: Global. Flag: -O3\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal+ "/v2_o3.txt", results);
end

aspectdef GlobalV2Ofast
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v2_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: SIFTv2. Measuring: Global. Flag: -Ofast\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal+ "/v2_ofast.txt", results);
end



aspectdef GlobalV3O0
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v3_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O0.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: SIFTv3. Measuring: Global. Flag: -O0\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal+ "/v3_o0.txt", results);
end

aspectdef GlobalV3O2
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v3_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O2.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: SIFTv3. Measuring: Global. Flag: -O2\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal+ "/v3_o2.txt", results);
end

aspectdef GlobalV3O3
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v3_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: SIFTv3. Measuring: Global. Flag: -O3\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal+ "/v3_o3.txt", results);
end

aspectdef GlobalV3Ofast
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v3_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: SIFTv3. Measuring: Global. Flag: -Ofast\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	for(var i = 0; i < numberOfExecutions; i++) {
		executor.execute("./sift ./");
		results += executor.getConsoleOutput();
	}
	Io.writeFile(speedupsGlobal+ "/v3_ofast.txt", results);
end



/***************************************** VECTORIZATION *****************************************/


aspectdef GlobalBaselineO3_VECTORIZATION
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_base_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_base.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3_Vect.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: Baseline. Measuring: Vectorization. Flag: -O3\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	results += executor.getConsoleOutput();
	
	Io.writeFile(vectorization + "/baseline_o3.txt", results);
end

aspectdef GlobalBaselineOfast_VECTORIZATION
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_base_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_base.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast_Vect.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: Baseline. Measuring: Vectorization. Flag: -Ofast\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	results += executor.getConsoleOutput();
	
	Io.writeFile(vectorization + "/baseline_ofast.txt", results);
end

aspectdef GlobalV1O3_VECTORIZATION
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v1.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3_Vect.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: SIFTv1. Measuring: Vectorization. Flag: -O3\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	results += executor.getConsoleOutput();
	
	Io.writeFile(vectorization + "/v1_o3.txt", results);
end


aspectdef GlobalV1Ofast_VECTORIZATION
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v1.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast_Vect.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: SIFTv1. Measuring: Vectorization. Flag: -Ofast\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	results += executor.getConsoleOutput();
	
	Io.writeFile(vectorization + "/v1_ofast.txt", results);
end

aspectdef GlobalV2O3_VECTORIZATION
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v2_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3_Vect.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: SIFTv2. Measuring: Vectorization. Flag: -O3\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	results += executor.getConsoleOutput();
	
	Io.writeFile(vectorization + "/v2_o3.txt", results);
end

aspectdef GlobalV2Ofast_VECTORIZATION
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v2_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast_Vect.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: SIFTv2. Measuring: Vectorization. Flag: -Ofast";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	results += executor.getConsoleOutput();
	
	Io.writeFile(vectorization + "/v2_ofast.txt", results);
end

aspectdef GlobalV3O3_VECTORIZATION
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v3_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3_Vect.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: SIFTv3. Measuring: Vectorization. Flag: -O3\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	results += executor.getConsoleOutput();
	
	Io.writeFile(vectorization + "/v3_o3.txt", results);
end

aspectdef GlobalV3Ofast_VECTORIZATION
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v3_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast_Vect.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: SIFTv3. Measuring: Vectorization. Flag: -Ofast";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	results += executor.getConsoleOutput();
	
	Io.writeFile(vectorization + "/v3_ofast.txt", results);
end



/***************************************** CACHE *****************************************/


aspectdef GlobalBaselineO0_CACHE
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_base_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_base.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O0.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: Baseline. Measuring: Cache. Flag: -O0\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./sift ./");
	results += executor.getConsoleOutput();
	
	Io.writeFile(cache + "/baseline_o0.txt", results);
end

aspectdef GlobalBaselineO2_CACHE
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_base_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_base.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O2.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: Baseline. Measuring: Cache. Flag: -GlobalBaselineO2\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./sift ./");
	results += executor.getConsoleOutput();
	
	Io.writeFile(cache + "/baseline_o2.txt", results);
end

aspectdef GlobalBaselineO3_CACHE
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_base_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_base.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: Baseline. Measuring: Cache. Flag: -O3\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./sift ./");
	results += executor.getConsoleOutput();
	
	Io.writeFile(cache + "/baseline_o3.txt", results);
end

aspectdef GlobalBaselineOfast_CACHE
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_base_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_base.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: Baseline. Measuring: Cache. Flag: -Ofast\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./sift ./");
	results += executor.getConsoleOutput();
	
	Io.writeFile(cache + "/baseline_ofast.txt", results);
end

aspectdef GlobalV1O0_CACHE
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v1.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O0.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: SIFTv1. Measuring: Cache. Flag: -O0\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./sift ./");
	results += executor.getConsoleOutput();
	
	Io.writeFile(cache + "/v1_o0.txt", results);
end 

aspectdef GlobalV1O2_CACHE
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v1.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O2.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: SIFTv1. Measuring: Cache. Flag: -O2\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./sift ./");
	results += executor.getConsoleOutput();
	
	Io.writeFile(cache + "/v1_o2.txt", results);
end 

aspectdef GlobalV1O3_CACHE
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v1.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: SIFTv1. Measuring: Cache. Flag: -O3\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./sift ./");
	results += executor.getConsoleOutput();
	
	Io.writeFile(cache + "/v1_o3.txt", results);
end 

aspectdef GlobalV1Ofast_CACHE
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v1.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: SIFTv1. Measuring: Cache. Flag: -Ofast\n";
	results += measuring;
	println(measuring);
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./sift ./");
	results += executor.getConsoleOutput();
	
	Io.writeFile(cache + "/v1_ofast.txt", results);
end 

aspectdef GlobalV2O0_CACHE
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v2_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O0.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: SIFTv2. Measuring: Cache. Flag: -O0\n";
	results += measuring;
	println(measuring);
	
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./sift ./");
	results += executor.getConsoleOutput();
	
	Io.writeFile(cache + "/v2_o0.txt", results);
end

aspectdef GlobalV2O2_CACHE
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v2_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O2.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: SIFTv2. Measuring: Cache. Flag: -O2\n";
	results += measuring;
	println(measuring);
	
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./sift ./");
	results += executor.getConsoleOutput();
	
	Io.writeFile(cache + "/v2_o2.txt", results);
end

aspectdef GlobalV2O3_CACHE
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v2_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: SIFTv2. Measuring: Cache. Flag: -O3\n";
	results += measuring;
	println(measuring);
	
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./sift ./");
	results += executor.getConsoleOutput();
	
	Io.writeFile(cache + "/v2_o3.txt", results);
end

aspectdef GlobalV2Ofast_CACHE
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v2_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: SIFTv2. Measuring: Cache. Flag: -Ofast\n";
	results += measuring;
	println(measuring);
	
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./sift ./");
	results += executor.getConsoleOutput();
	
	Io.writeFile(cache + "/v2_ofast.txt", results);
end



aspectdef GlobalV3O0_CACHE
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v3_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O0.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: SIFTv3. Measuring: Cache. Flag: -O0\n";
	results += measuring;
	println(measuring);
	
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./sift ./");
	results += executor.getConsoleOutput();
	
	Io.writeFile(cache + "/v3_o0.txt", results);
end

aspectdef GlobalV3O2_CACHE
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v3_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O2.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: SIFTv3. Measuring: Cache. Flag: -O2\n";
	results += measuring;
	println(measuring);
	
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./sift ./");
	results += executor.getConsoleOutput();
	
	Io.writeFile(cache + "/v3_o2.txt", results);
end

aspectdef GlobalV3O3_CACHE
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v3_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_O3.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: SIFTv3. Measuring: Cache. Flag: -O3\n";
	results += measuring;
	println(measuring);
	
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./sift ./");
	results += executor.getConsoleOutput();
	
	Io.writeFile(cache + "/v3_o3.txt", results);
end

aspectdef GlobalV3Ofast_CACHE
	var results = "";
	imsmoothContent = Io.readFile(imsmoothVersions + "/imsmooth_v3_noprints.c");
	gaussContent = Io.readFile(gaussianssVersions + "/gaussianss_v1.c");
	scriptSiftContent = Io.readFile(scriptSiftVersions + "/script_sift_global.c");
	makefileContent = Io.readFile(makefileVersions + "/Makefile_Ofast.common");
		
	Io.writeFile(imsmooth, imsmoothContent);
	Io.writeFile(gaussianss, gaussContent);
	Io.writeFile(script_sift, scriptSiftContent);
	Io.writeFile(makefile, makefileContent);
	
	var measuring = "Executing: SIFTv3. Measuring: Cache. Flag: -Ofast\n";
	results += measuring;
	println(measuring);
	
	
	executor.execute("make", "compile");
	executor.execute("valgrind --tool=callgrind --simulate-cache=yes ./sift ./");
	results += executor.getConsoleOutput();
	
	Io.writeFile(cache + "/v3_ofast.txt", results);
end